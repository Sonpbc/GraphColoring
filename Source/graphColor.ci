mainmodule Module {
  include "vertex.h";
  include "graphColor.h";

  readonly CProxy_Main mainProxy;
  readonly  CkGroupID counterGroup;
  readonly AdjListType adjList_;
  readonly int vertices_;
  readonly int chromaticNum_;
  readonly int grainSize;
  readonly bool doPriority;
  readonly bool baseline;
  readonly double timeout;

  message DUMMYMSG;

  message priorityMsg; // { UInt parentPtr[]; };

  mainchare Main {
    entry Main(CkArgMsg*);
    entry [reductiontarget] void done(void);
  };

  group counter {
    entry counter();
    entry [expedited] void sendCounts(); 
    entry [expedited] void registerAndStateNodeStatHelper(std::string); 
  };

  chare Node { 
    entry Node(bool, int, CProxy_Node );
    entry Node( std::vector<vertex> , bool , int , CProxy_Node ,  std::string , UShort pBits, UInt pPtr[size], int size);

    entry [expedited] void finish(bool, std::vector<vertex>);

    entry void rerun();
    entry void run(){
      serial { 
        //-----DEBUG USE BELOW--------
        //this->printGraph();
        //-----DEBUG USE ABOVE--------

        /* For a given chare if the number of uncolored vertices is below a
         * threshold (grainsize) then it colors them using a sequential LIFO
         * stack
         */

        if((uncolored_num_ <= grainSize) || (baseline == true)){
          colorLocally();
          return;
        }

        colorRemotely();
      }
    
      /* When  one of the child finishes, either it finds the solution or
       * gets into an dead end, it notifies its parent.  In the former case
       * the parent can either propagate the victory information to its
       * parent(in case of OR tree) or wait for another children to respond (in case of AND tree).
       * Also the parent needs to make sure that all the other chares should stop
       * evaluating their subtrees.
       */

      while(true){
        when finish(bool res, std::vector<vertex> state) serial{

          //-----------DEBUG CODE BELOW-------------------
          //CkPrintf("A child finish in Chare[uncolor=%d]; \
          //    res=%d\n", uncolored_num_, res);
          //-----------DEBUG CODE ABOVE------------------

          bool waitChild = mergeToParent(res, state);

          if(!waitChild)
            return;
        }
      }

    };
  };
};
